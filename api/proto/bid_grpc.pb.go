// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bid.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidClient is the client API for Bid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidClient interface {
	PlaceBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	GetWinningBidder(ctx context.Context, in *BidWinnerRequest, opts ...grpc.CallOption) (*BidWinnerResponse, error)
}

type bidClient struct {
	cc grpc.ClientConnInterface
}

func NewBidClient(cc grpc.ClientConnInterface) BidClient {
	return &bidClient{cc}
}

func (c *bidClient) PlaceBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/proto.Bid/PlaceBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidClient) GetWinningBidder(ctx context.Context, in *BidWinnerRequest, opts ...grpc.CallOption) (*BidWinnerResponse, error) {
	out := new(BidWinnerResponse)
	err := c.cc.Invoke(ctx, "/proto.Bid/GetWinningBidder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidServer is the server API for Bid service.
// All implementations must embed UnimplementedBidServer
// for forward compatibility
type BidServer interface {
	PlaceBid(context.Context, *BidRequest) (*BidResponse, error)
	GetWinningBidder(context.Context, *BidWinnerRequest) (*BidWinnerResponse, error)
	mustEmbedUnimplementedBidServer()
}

// UnimplementedBidServer must be embedded to have forward compatible implementations.
type UnimplementedBidServer struct {
}

func (UnimplementedBidServer) PlaceBid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBid not implemented")
}
func (UnimplementedBidServer) GetWinningBidder(context.Context, *BidWinnerRequest) (*BidWinnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWinningBidder not implemented")
}
func (UnimplementedBidServer) mustEmbedUnimplementedBidServer() {}

// UnsafeBidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidServer will
// result in compilation errors.
type UnsafeBidServer interface {
	mustEmbedUnimplementedBidServer()
}

func RegisterBidServer(s grpc.ServiceRegistrar, srv BidServer) {
	s.RegisterService(&Bid_ServiceDesc, srv)
}

func _Bid_PlaceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServer).PlaceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bid/PlaceBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServer).PlaceBid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bid_GetWinningBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidWinnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServer).GetWinningBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bid/GetWinningBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServer).GetWinningBidder(ctx, req.(*BidWinnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bid_ServiceDesc is the grpc.ServiceDesc for Bid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Bid",
	HandlerType: (*BidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBid",
			Handler:    _Bid_PlaceBid_Handler,
		},
		{
			MethodName: "GetWinningBidder",
			Handler:    _Bid_GetWinningBidder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bid.proto",
}
